package com.qaprosoft.zafira.dbaccess.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;

import com.qaprosoft.zafira.dbaccess.dao.mysql.DeviceMapper;
import com.qaprosoft.zafira.models.db.Device;

@Test
@ContextConfiguration("classpath:com/qaprosoft/zafira/dbaccess/dbaccess-test.xml")
public class DeviceMapperTest extends AbstractTestNGSpringContextTests
{
	private static final boolean ENABLED = false;

	private static final Device DEVICE = new Device()
	{
		private static final long serialVersionUID = 1L;
		{
			setModel("Samsung Galaxy S4");
			setSerial("2342jjj34223");
			setEnabled(false);
			setDisconnects(1);
			setLastStatus(false);
		}
	};

	@Autowired
	private DeviceMapper deviceMapper;

	@Test(enabled = ENABLED)
	public void createDevice()
	{
		deviceMapper.createDevice(DEVICE);
		assertNotEquals(DEVICE.getId(), 0, "Device ID must be set up by autogenerated keys");
	}

	@Test(enabled = ENABLED, dependsOnMethods =
	{ "createDevice" })
	public void getDeviceById()
	{
		checkDevice(deviceMapper.getDeviceById(DEVICE.getId()));
	}
	
	@Test(enabled = ENABLED, dependsOnMethods =
	{ "createDevice" })
	public void getAllDevices()
	{
		checkDevice(deviceMapper.getAllDevices().get(0));
	}

	@Test(enabled = ENABLED, dependsOnMethods =
	{ "createDevice" })
	public void updateDevice()
	{
		DEVICE.setModel("Samsung Galaxy S4");
		DEVICE.setSerial("4442455dfgff");
		DEVICE.setEnabled(true);
		DEVICE.setDisconnects(2);
		DEVICE.setLastStatus(true);

		deviceMapper.updateDevice(DEVICE);

		checkDevice(deviceMapper.getDeviceById(DEVICE.getId()));
	}

	/**
	 * Turn this in to delete car after all tests
	 */
	private static final boolean DELETE_ENABLED = true;
	/**
	 * If true, then <code>deleteDevice</code> will be used to delete sms confirmations after all tests, otherwise -
	 * <code>deleteDeviceById</code>
	 */
	private static final boolean DELETE_BY_DEVICE = false;

	@Test(enabled = ENABLED && DELETE_ENABLED && DELETE_BY_DEVICE, dependsOnMethods =
	{
			"createDevice", "getDeviceById", "getAllDevices", "updateDevice"
	})
	public void deleteDevice()
	{
		deviceMapper.deleteDevice(DEVICE);

		assertNull(deviceMapper.getDeviceById(DEVICE.getId()));
	}

	@Test(enabled = ENABLED && DELETE_ENABLED && !DELETE_BY_DEVICE, dependsOnMethods =
	{ "createDevice", "getDeviceById", "getAllDevices", "updateDevice" })
	public void deleteDeviceById()
	{
		deviceMapper.deleteDeviceById(DEVICE.getId());

		assertNull(deviceMapper.getDeviceById(DEVICE.getId()));
	}

	private void checkDevice(Device device)
	{
		assertEquals(device.getModel(), DEVICE.getModel(), "Model must match");
		assertEquals(device.getSerial(), DEVICE.getSerial(), "Serial must match");
		assertEquals(device.isEnabled(), DEVICE.isEnabled(), "Enabled must match");
		assertEquals(device.isLastStatus(), DEVICE.isLastStatus(), "Last status must match");
		assertEquals(device.getDisconnects(), DEVICE.getDisconnects(), "Disconnects must match");
	}
}
