package com.qaprosoft.zafira.dbaccess.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;

import com.qaprosoft.zafira.dbaccess.dao.mysql.DashboardMapper;
import com.qaprosoft.zafira.dbaccess.dao.mysql.WidgetMapper;
import com.qaprosoft.zafira.dbaccess.model.Dashboard;
import com.qaprosoft.zafira.dbaccess.model.Widget;

@Test
@ContextConfiguration("classpath:com/qaprosoft/zafira/dbaccess/dbaccess-test.xml")
public class DashboardMapperTest extends AbstractTestNGSpringContextTests {

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final List<Widget> WIDGETS = new ArrayList<Widget>() {

        private static final long serialVersionUID = 1L;
        {
            add(new Widget() {
                private static final long serialVersionUID = 1L;
                {
                    setModel("m1");
                    setSql("s1");
                    setPosition(0);
                    setSize(0);
                    setTitle("t1");
                    setType("wt1");
                }
            });
        }
    };

    private static final Widget WIDGET = new Widget()
    {
        private static final long serialVersionUID = 1L;
        {
            setModel("m1");
            setSql("s1");
            setPosition(0);
            setSize(0);
            setTitle("t1");
            setType("wt1");
        }
    };

    private static final Dashboard DASHBOARD = new Dashboard()
    {
        private static final long serialVersionUID = 1L;
        {
            setTitle("t1");
            setWidgets(WIDGETS);
        }
    };

    @Autowired
    private DashboardMapper dashboardMapper;

    @Autowired
    private WidgetMapper widgetMapper;

    @Test(enabled = ENABLED)
    public void createDashboard()
    {
        dashboardMapper.createDashboard(DASHBOARD);
        assertNotEquals(DASHBOARD.getId(), 0, "Dashboard ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"createDashboard"})
    public void addWidgetToDashboard() {
        widgetMapper.createWidget(WIDGET);
        dashboardMapper.addWidget(DASHBOARD.getId(), WIDGET);
        DASHBOARD.setWidgets(Arrays.asList(WIDGET));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"createDashboard"})
    public void getDashboardById()
    {
        checkDashboard(dashboardMapper.getDashboardById(DASHBOARD.getId()));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"createDashboard"})
    public void getAllDashboards()
    {
        List<Dashboard> dashboards = dashboardMapper.getAllDashboards();
        checkDashboard(dashboards.get(dashboards.size() - 1));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"createDashboard"})
    public void updateDashboard()
    {
        DASHBOARD.setTitle("t2");
        dashboardMapper.updateDashboard(DASHBOARD);
        checkDashboard(dashboardMapper.getDashboardById(DASHBOARD.getId()));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"createDashboard", "getDashboardById", "getAllDashboards", "updateDashboard",
            "addWidgetToDashboard"})
    public void updateWidgetOnDashboard() {

        DASHBOARD.getWidgets().get(0).setPosition(3);
        DASHBOARD.getWidgets().get(0).setSize(3);
        dashboardMapper.updateWidget(DASHBOARD, DASHBOARD.getWidgets().get(0));
        checkDashboard(dashboardMapper.getDashboardById(DASHBOARD.getId()));
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"createDashboard", "getDashboardById", "getAllDashboards", "updateDashboard",
            "addWidgetToDashboard", "updateWidgetOnDashboard"})
    public void removeWidgetFromDashboard() {
        dashboardMapper.removeWidget((long) 20);
    }
    
    @Test(enabled = ENABLED, dependsOnMethods = {"createDashboard", "getDashboardById", "getAllDashboards", "updateDashboard", "updateWidgetOnDashboard", "removeWidgetFromDashboard"})
    public void deleteDashboardById()
    {
        dashboardMapper.deleteDashboardById((DASHBOARD.getId()));
        assertNull(dashboardMapper.getDashboardById(DASHBOARD.getId()));
    }

    private void checkDashboard(Dashboard dashboard)
    {
        assertEquals(dashboard.getTitle(), DASHBOARD.getTitle(), "Dashboard title must match");
        List<Widget> widgets = dashboard.getWidgets();
        assertEquals(widgets.size(), DASHBOARD.getWidgets().size(), "Invalid amount of widgets!");
        for(int i = 0; i < widgets.size(); i++)
        {
        	assertEquals(widgets.get(i).getTitle(), DASHBOARD.getWidgets().get(i).getTitle(), "Widget title must match");
        	assertEquals(widgets.get(i).getType(), DASHBOARD.getWidgets().get(i).getType(), "Widget type must match");
        	assertEquals(widgets.get(i).getSql(), DASHBOARD.getWidgets().get(i).getSql(), "Widget sql must match");
        	assertEquals(widgets.get(i).getModel(), DASHBOARD.getWidgets().get(i).getModel(), "Widget model must match");
        	assertEquals(widgets.get(i).getPosition(), DASHBOARD.getWidgets().get(i).getPosition(), "Widget position must match");
        	assertEquals(widgets.get(i).getSize(), DASHBOARD.getWidgets().get(i).getSize(), "Widget size must match");
        }
    }
}
