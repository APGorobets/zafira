package com.qaprosoft.zafira.dbaccess.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;

import com.qaprosoft.zafira.dbaccess.dao.mysql.DashboardMapper;
import com.qaprosoft.zafira.dbaccess.model.Dashboard;

@Test
@ContextConfiguration("classpath:com/qaprosoft/zafira/dbaccess/dbaccess-test.xml")
public class DashboardMapperTest extends AbstractTestNGSpringContextTests
{
	/**
	 * Turn this on to enable this test
	 */
	private static final boolean ENABLED = false;
	
	private static final Dashboard DASHBOARD = new Dashboard()
	{
		private static final long serialVersionUID = 1L;
		{
			setModel("m1");
			setSql("s1");
			setPosition(0);
			setSize(0);
			setTitle("t1");
		}
	};
	
	@Autowired
	private DashboardMapper dashboardMapper;
	
	@Test(enabled = ENABLED)
	public void createDashboard()
	{
		dashboardMapper.createDashboard(DASHBOARD);
		assertNotEquals(DASHBOARD.getId(), 0, "Dashboard ID must be set up by autogenerated keys");
	}
	
	@Test(enabled = ENABLED, dependsOnMethods = { "createDashboard" })
	public void getDashboardById()
	{
		checkDashboard(dashboardMapper.getDashboardById(DASHBOARD.getId()));
	}
	
	@Test(enabled = ENABLED, dependsOnMethods = { "createDashboard" })
	public void getAllDashboards()
	{
		checkDashboard(dashboardMapper.getAllDashboards().get(0));
	}
	
	@Test(enabled = ENABLED, dependsOnMethods = { "createDashboard" })
	public void updateDashboard()
	{
		DASHBOARD.setModel("m2");
		DASHBOARD.setSql("s2");
		DASHBOARD.setPosition(1);
		DASHBOARD.setSize(1);
		DASHBOARD.setTitle("t2");
		
		dashboardMapper.updateDashboard(DASHBOARD);

		checkDashboard(dashboardMapper.getDashboardById(DASHBOARD.getId()));
	}
	
	@Test(enabled = ENABLED, dependsOnMethods = { "createDashboard", "getDashboardById", "getAllDashboards", "updateDashboard"})
	public void deleteDashboardById()
	{
		dashboardMapper.deleteDashboardById((DASHBOARD.getId()));
		assertNull(dashboardMapper.getDashboardById(DASHBOARD.getId()));
	}
	
	private void checkDashboard(Dashboard dashboard)
	{
		assertEquals(dashboard.getTitle(), DASHBOARD.getTitle(), "Dashboard title must match");
		assertEquals(dashboard.getSize(), DASHBOARD.getSize(), "Dashboard size must match");
		assertEquals(dashboard.getPosition(), DASHBOARD.getPosition(), "Dashboard order must match");
		assertEquals(dashboard.getModel(), DASHBOARD.getModel(), "Dashboard model match");
		assertEquals(dashboard.getSql(), DASHBOARD.getSql(), "Dashboard sql must match");
	}
}
