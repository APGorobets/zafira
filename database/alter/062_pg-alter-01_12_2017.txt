DROP TABLE IF EXISTS zafira.DEVICES;
DROP TABLE IF EXISTS zafira.EVENTS;
DROP TABLE IF EXISTS zafira.UA_INSPECTIONS;

DROP TABLE IF EXISTS PERMISSIONS;
CREATE TABLE IF NOT EXISTS PERMISSIONS (
  ID SERIAL,
  NAME VARCHAR(255) NOT NULL,
  MODIFIED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX PERMISSION_UNIQUE ON PERMISSIONS (NAME);
CREATE TRIGGER update_timestamp_permissions BEFORE INSERT OR UPDATE ON PERMISSIONS FOR EACH ROW EXECUTE PROCEDURE update_timestamp();


DROP TABLE IF EXISTS GROUP_PERMISSIONS;
CREATE TABLE IF NOT EXISTS GROUP_PERMISSIONS (
  ID SERIAL,
  GROUP_ID INT NOT NULL,
  PERMISSION_ID INT NOT NULL,
  MODIFIED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (ID),
  CONSTRAINT fk_GROUP_PERMISSIONS_GROUPS1
    FOREIGN KEY (GROUP_ID)
    REFERENCES GROUPS (ID)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT fk_GROUP_PERMISSIONS_PERMISSIONS1
    FOREIGN KEY (PERMISSION_ID)
    REFERENCES PERMISSIONS (ID)
    ON DELETE CASCADE
    ON UPDATE NO ACTION);
CREATE INDEX fk_GROUP_PERMISSIONS_GROUPS1_idx ON GROUP_PERMISSIONS (GROUP_ID);
CREATE INDEX fk_GROUP_PERMISSIONS_PERMISSIONS1_idx ON GROUP_PERMISSIONS (PERMISSION_ID);
CREATE UNIQUE INDEX GROUP_PERMISSION_UNIQUE ON GROUP_PERMISSIONS (PERMISSION_ID, GROUP_ID);
CREATE TRIGGER update_timestamp_group_premissions BEFORE INSERT OR UPDATE ON GROUP_PERMISSIONS FOR EACH ROW EXECUTE PROCEDURE update_timestamp();