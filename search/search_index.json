{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nZafira is central automation reporting system that is build on the top of Java Spring Framework. It dramatically increases the transparany of test automation results and provides better undestanding of product quality. Qaprosoft team is developing Zafira based on more then 10-years expertise in quality assurance and we strongly believe that your QA/Dev engineers and managers will love it!\n\n\n\n  \n\n\n\n\n\nZafira was initially designed to track automation progress of the tests written using \nCarina automation framework\n but you are capable to integrate Zafira client into you own automation tool. We are activly developing clients for different languages and frameworks but still looking for active community to provide better support. \n\n\nPrimary features\n\n\n\n\nReal-time test results tracking via websockets\n\n\nVNC streaming and video recording of test sessions\n\n\nFlexibly configured widgets and dashboards based on \nD3JS\n\n\nUser management with authorization policies\n\n\nIntegration with TestRail and JIRA\n\n\nIntegration with Hipchat and Slack\n\n\nAbility to compose automation reports and send via email\n\n\n\n\n\n  \n\n    \n\n      \nConfigurable dashboards\n\n      \n\n    \n\n    \n\n      \nIntegrations with multiple services\n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \nReal-time test results\n\n      \n\n    \n\n    \n\n      \nLive streaming and video recording\n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \nComparison of test runs\n\n      \n\n    \n\n    \n\n      \nTest issues tracking", 
            "title": "Overview"
        }, 
        {
            "location": "/#introduction", 
            "text": "Zafira is central automation reporting system that is build on the top of Java Spring Framework. It dramatically increases the transparany of test automation results and provides better undestanding of product quality. Qaprosoft team is developing Zafira based on more then 10-years expertise in quality assurance and we strongly believe that your QA/Dev engineers and managers will love it!  \n     Zafira was initially designed to track automation progress of the tests written using  Carina automation framework  but you are capable to integrate Zafira client into you own automation tool. We are activly developing clients for different languages and frameworks but still looking for active community to provide better support.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#primary-features", 
            "text": "Real-time test results tracking via websockets  VNC streaming and video recording of test sessions  Flexibly configured widgets and dashboards based on  D3JS  User management with authorization policies  Integration with TestRail and JIRA  Integration with Hipchat and Slack  Ability to compose automation reports and send via email   \n   \n     \n       Configurable dashboards \n       \n     \n     \n       Integrations with multiple services \n       \n     \n   \n   \n     \n       Real-time test results \n       \n     \n     \n       Live streaming and video recording \n       \n     \n   \n   \n     \n       Comparison of test runs \n       \n     \n     \n       Test issues tracking", 
            "title": "Primary features"
        }, 
        {
            "location": "/getting_started/", 
            "text": "Getting started\n\n\nPrerequesties\n\n\nThe easiest way to deploy Zafira it to use \nDocker\n. You will find all the details for installation of \nDocker Engine\n and \nDocker Compose\n in oficial documentation. Docker allows to install Zafira on Linux, Mac or Windows. Make sure that you have allocated at least 2 CPUs and 4Gb or RAM for Docker operations.\n\n\n\n  \n\n\n\n\n\nBefore running Zafira, verify that following ports are not binded:\n\n\n\n\n8080  (Tomcat)\n\n\n5433  (PostgresDB)\n\n\n15672 (RabbitMQ)\n\n\n15674 (RabbitMQ)\n\n\n5672  (RabbitMQ)\n\n\n5601  (ELK)\n\n\n9200  (ELK)\n\n\n5044  (ELK)\n\n\n\n\nStartup in Docker\n\n\n\n\nClone Zafira repo:\n\n\n\n\n$ git clone git@github.com:qaprosoft/zafira.git\n\n\n\n\n\n\nIf you are planning to access Zafira remotely you will need to modify \ndocker-compose.yml\n specifying appropriate IP address of your host:\n\n\n\n\nenvironment:\n  - ZAFIRA_URL=http://localhost:8080\n\n\n\n\n\n\nStart Zafira:\n\n\n\n\n$ docker-compose up -d\n\n\n\n\n\n\nVerify deployment by running:\n\n\n\n\n$ docker ps\n\nCONTAINER ID        IMAGE                               COMMAND    \nc0e8e371de0f        qaprosoft/zafira:latest             \n/bin/sh -c /entrypo\u2026\n\na207d5718996        sebp/elk:630                        \n/usr/local/bin/star\u2026\n \n5ccaadeeafe7        qaprosoft/rabbitmq:latest           \ndocker-entrypoint.s\u2026\n\n922b75b2849a        selenium/standalone-chrome:latest   \n/opt/bin/entry_poin\u2026\n\ne8a2d32590ed        qaprosoft/postgres:9.6              \ndocker-entrypoint.s\u2026\n\n\n\n\n\n\n\nOpen Zafira in your browser:\n\n\n\n\nhttp://localhost:8080/zafira\n\n\n\n\n\n\nUse default credentials to login:\n\n\n\n\nqpsdemo/qpsdemo", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting_started/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting_started/#prerequesties", 
            "text": "The easiest way to deploy Zafira it to use  Docker . You will find all the details for installation of  Docker Engine  and  Docker Compose  in oficial documentation. Docker allows to install Zafira on Linux, Mac or Windows. Make sure that you have allocated at least 2 CPUs and 4Gb or RAM for Docker operations.  \n     Before running Zafira, verify that following ports are not binded:   8080  (Tomcat)  5433  (PostgresDB)  15672 (RabbitMQ)  15674 (RabbitMQ)  5672  (RabbitMQ)  5601  (ELK)  9200  (ELK)  5044  (ELK)", 
            "title": "Prerequesties"
        }, 
        {
            "location": "/getting_started/#startup-in-docker", 
            "text": "Clone Zafira repo:   $ git clone git@github.com:qaprosoft/zafira.git   If you are planning to access Zafira remotely you will need to modify  docker-compose.yml  specifying appropriate IP address of your host:   environment:\n  - ZAFIRA_URL=http://localhost:8080   Start Zafira:   $ docker-compose up -d   Verify deployment by running:   $ docker ps\n\nCONTAINER ID        IMAGE                               COMMAND    \nc0e8e371de0f        qaprosoft/zafira:latest              /bin/sh -c /entrypo\u2026 \na207d5718996        sebp/elk:630                         /usr/local/bin/star\u2026  \n5ccaadeeafe7        qaprosoft/rabbitmq:latest            docker-entrypoint.s\u2026 \n922b75b2849a        selenium/standalone-chrome:latest    /opt/bin/entry_poin\u2026 \ne8a2d32590ed        qaprosoft/postgres:9.6               docker-entrypoint.s\u2026    Open Zafira in your browser:   http://localhost:8080/zafira   Use default credentials to login:   qpsdemo/qpsdemo", 
            "title": "Startup in Docker"
        }, 
        {
            "location": "/client_setup/", 
            "text": "Client setup\n\n\nAccess token\n\n\nZafira provides REST API to track test automation results (use \nSwagger\n to learn API). You have diffent options of integration of your test client. \nCarina automation framework\n has integration with Zafira under the hood. Regardless of integration flow you selected, first of all you will need access token generated. Navigate to \nUsername\n \n \nProfile\n in top navigation menu:\n\n\n\n  \n\n\n\n\n\nScroll down and generate new access token:\n\n\n\n  \n\n\n\n\n\nZafira uses stateless authenticatication using \nJWT\n technology. In general clients stores refresh token that is used to generate access token with 5-hours expiration term. \n\n\nPOST /api/auth/refresh\n{\n  \nrefreshToken\n: \naccess_token\n\n}\n\nResponse:\n{\n  \ntype\n: \nBearer\n,\n  \naccessToken\n: \neyJhbGciOiJIUzUxMiJ9...\n,\n  \nrefreshToken\n: \neyJhbGciOiJIUzUxMi9...\n,\n  \nexpiresIn\n: 300\n}\n\n\n\n\nAll HTTP calls that requires authorization context should contain header:\n\n\nAuthorizarion: Bearer \nauth_token\n\n\n\n\n\nIntegration with Carina\n\n\nCarina automation framework tacks test results in Zafira by default, all you need is valid access token in \nzafira.properties\n file.\n\n\nzafira_enabled=true\nzafira_service_url=http://localhost:8080/zafira-ws\nzafira_access_token=eyJhbGciOiJIUzUxMiJ9.eyJzdWI...\nzafira_project=UNKNOWN\nzafira_rerun_failures=false\nzafira_report_emails=\nzafira_configurator=com.qaprosoft.carina.core.foundation.report.ZafiraConfigurator\n\n\n\n\nVerify following properties:\n\n\n\n\nzafira_enabled=true\n\n\nzafira_service_url=YOUR_ZAFIRA_URL\n\n\n\n\nBy default \nzafira_project=UNKNOWN\n but using admin user you are capable to create multiple projects via Zafira UI (Top menu \n Project \n Create). When new project created you may override \nzafira_project\n property and track resutls in appropriate context.\n\n\n\n  \n\n\n\n\n\nIntegration with TestNG\n\n\nIf you are implementing your own TestNG-based automation project you can easily setup integration with Zafira using \nTestNG listener\n.\n\n\n\n\nAdd Zafira client as Maven dependency:\n\n\n\n\ndependency\n\n    \ngroupId\ncom.qaprosoft\n/groupId\n\n    \nartifactId\nzafira-client\n/artifactId\n\n    \nversion\nlatest\n/version\n\n\n/dependency\n\n\n\n\n\n\n\nCreate \nzafira.properties\n and place in resource folder, update configuration\n\n\nInclude com.qaprosoft.zafira.listener.ZafiraListener as TestNG listener:\n\n\n\n\nsuite\n\n    [...]\n      \nlisteners\n\n        \nlistener class-name=\ncom.qaprosoft.zafira.listener.ZafiraListener\n/\n\n      \n/listeners\n\n    [...]\n\n/suite\n\n\n\n\n\nor\n\n\n@Listeners({ZafiraListener.class})\npublic class LoginTest {\n[...]\n}\n\n\n\n\nLanguages and frameworks supported\n\n\n\n\nJava - TestNG guide\n\n\nRuby - Cucumber\n\n\nRuby - RSpec\n\n\nC# - NUnit", 
            "title": "Client setup"
        }, 
        {
            "location": "/client_setup/#client-setup", 
            "text": "", 
            "title": "Client setup"
        }, 
        {
            "location": "/client_setup/#access-token", 
            "text": "Zafira provides REST API to track test automation results (use  Swagger  to learn API). You have diffent options of integration of your test client.  Carina automation framework  has integration with Zafira under the hood. Regardless of integration flow you selected, first of all you will need access token generated. Navigate to  Username     Profile  in top navigation menu:  \n     Scroll down and generate new access token:  \n     Zafira uses stateless authenticatication using  JWT  technology. In general clients stores refresh token that is used to generate access token with 5-hours expiration term.   POST /api/auth/refresh\n{\n   refreshToken :  access_token \n}\n\nResponse:\n{\n   type :  Bearer ,\n   accessToken :  eyJhbGciOiJIUzUxMiJ9... ,\n   refreshToken :  eyJhbGciOiJIUzUxMi9... ,\n   expiresIn : 300\n}  All HTTP calls that requires authorization context should contain header:  Authorizarion: Bearer  auth_token", 
            "title": "Access token"
        }, 
        {
            "location": "/client_setup/#integration-with-carina", 
            "text": "Carina automation framework tacks test results in Zafira by default, all you need is valid access token in  zafira.properties  file.  zafira_enabled=true\nzafira_service_url=http://localhost:8080/zafira-ws\nzafira_access_token=eyJhbGciOiJIUzUxMiJ9.eyJzdWI...\nzafira_project=UNKNOWN\nzafira_rerun_failures=false\nzafira_report_emails=\nzafira_configurator=com.qaprosoft.carina.core.foundation.report.ZafiraConfigurator  Verify following properties:   zafira_enabled=true  zafira_service_url=YOUR_ZAFIRA_URL   By default  zafira_project=UNKNOWN  but using admin user you are capable to create multiple projects via Zafira UI (Top menu   Project   Create). When new project created you may override  zafira_project  property and track resutls in appropriate context.", 
            "title": "Integration with Carina"
        }, 
        {
            "location": "/client_setup/#integration-with-testng", 
            "text": "If you are implementing your own TestNG-based automation project you can easily setup integration with Zafira using  TestNG listener .   Add Zafira client as Maven dependency:   dependency \n     groupId com.qaprosoft /groupId \n     artifactId zafira-client /artifactId \n     version latest /version  /dependency    Create  zafira.properties  and place in resource folder, update configuration  Include com.qaprosoft.zafira.listener.ZafiraListener as TestNG listener:   suite \n    [...]\n       listeners \n         listener class-name= com.qaprosoft.zafira.listener.ZafiraListener / \n       /listeners \n    [...] /suite   or  @Listeners({ZafiraListener.class})\npublic class LoginTest {\n[...]\n}", 
            "title": "Integration with TestNG"
        }, 
        {
            "location": "/client_setup/#languages-and-frameworks-supported", 
            "text": "Java - TestNG guide  Ruby - Cucumber  Ruby - RSpec  C# - NUnit", 
            "title": "Languages and frameworks supported"
        }, 
        {
            "location": "/integrations/", 
            "text": "Integration\n\n\nZafira is integrated with multiple 3rd-party tools like Amazon, Slack, Gmail etc. You are able to add new integration in working Zafira without restart of web application. Navigate to \nUsername \n Integrations\n in top navigation menu:\n\n\n\n  \n\n\n\n\n\nOn the integrations page you will find multiple blocks responsible for different integration modules. Pay attention to the fact that security model HTTP/HTTPS may affect your integration URL.\n\n\n\n  \n\n\n\n\n\nAmazon\n\n\nZafira uses integration with Amazon S3 service to store user profile photos and company logo. First of all we will need to create new S3 bucket and generate access token to provide API access to Amazon S3 from Zafira.\n\n\n\n\nCreate new S3 bucket in region you prefer \n\n\nCreate new IAM user with \nProgrammatic access\n\n\nGrant read/write permissions for new user (read \ndetailed guide\n)\n\n\nGenerate new access/secret keys\n\n\nTurn on Amazon integration and provide access/secret keys and name of the bucket you've created\n\n\nPress save and refresh the page, green light indicates correct integration status\n\n\n\n\n\n  \n\n\n\n\n\nEmail\n\n\nZafira provides functionality for sending test results, widgets and dashboards via email. You have to specify correct SMTP credentials to enable this feature. We are mostly using Gmail for that purposes. You can use configuration below replacing email and password with your valid Gmail credentials.\n\n\n\n\nTurn on Email integration\n\n\nSpecify correct SMTP host and port\n\n\nSpecify valid Gmail credentials \n\n\nPress save and refresh the page, green light indicates correct integration status\n\n\n\n\n\n  \n\n\n\n\n\nJenkins\n\n\nJenkins integration is used for triggering new builds and collecting test jobs configuration during the startup. Also Zafira provides remote debug with Jenkins integration enabled. For Jenkins integration follow the next steps:\n\n\n\n\nCreate user with READ,RUN access for jobs\n\n\nGenerate access token (read \ninstruction\n)\n\n\nPaste Jenkins URL, username and token to Zafira\n\n\nPress save and refresh the page, green light indicates correct integration status\n\n\n\n\n\n  \n\n\n\n\n\nJira\n\n\nJira integration allows to track known issues status for failed test cases. When you assign known issue to contstantly failing test cases you may specify appropriate Jira ticket. In Jira integrationg is inabled, Zafira will check current ticket status and track failure as known issus if ticket opened and as unknown if it is closed, so you will never loose regression bugs.\n\n\n\n\nPaste Jira URL, username and password to Zafira\n\n\nList set of statuses that indicates that ticket is closed\n\n\nPress save and refresh the page, green light indicates correct integration status\n\n\n\n\n\n  \n\n\n\n\n\nLDAP\n\n\nZafira supports LDAP authentication, in this case on first success login via LDAP Zafira will register user details in own database. Admin will be able to manage user permissions for every new user came via LDAP. \n\n\n\n\nUse configuration below as a reference for your LDAP connection setup\n\n\nPress save and refresh the page, green light indicates correct integration status\n\n\n\n\n\n  \n\n\n\n\n\nSLACK\n\n\nZafira is capable to post automation results into specific Slack channels for better visibility.\nIf integration is set up right after test run is finished notification with run details will be sent into appropriate channel. Such  Slack notification contains base information on test run and also includes links to this run in Zafira and Jenkins.\nAfter user marks some run as reviewed and Slack integration is configured for executed Jenkins job user will be proposed to send to Slack notification about reviewed run.\nIn order to setup Slack integration follow the next steps:\n\n\n\n\nGenerate Slack web hook url and add it as parameter SLACK_WEB_HOOK_URL into SLACK block at Zafira integrations page\n\n\nFor each Jenkins job you need integration for add parameters in Zafira using next pattern: \nSLACK_NOTIF_CHANNEL_real_channel_name=JENKINS_JOB_1;JENKINS_JOB_2\n where\n\n\nreal_channel_name - name of Slack channel to post notifications to\n\n\nJENKINS_JOB_1 and JENKINS_JOB_2 - names of Jenkins jobs\n\n\nYou may add as many integration as you need. For each new Slack channel create new parameter in SLACK section in Zafira\n\n\nPress save and refresh the page, green light indicates correct integration status", 
            "title": "Integrations"
        }, 
        {
            "location": "/integrations/#integration", 
            "text": "Zafira is integrated with multiple 3rd-party tools like Amazon, Slack, Gmail etc. You are able to add new integration in working Zafira without restart of web application. Navigate to  Username   Integrations  in top navigation menu:  \n     On the integrations page you will find multiple blocks responsible for different integration modules. Pay attention to the fact that security model HTTP/HTTPS may affect your integration URL.", 
            "title": "Integration"
        }, 
        {
            "location": "/integrations/#amazon", 
            "text": "Zafira uses integration with Amazon S3 service to store user profile photos and company logo. First of all we will need to create new S3 bucket and generate access token to provide API access to Amazon S3 from Zafira.   Create new S3 bucket in region you prefer   Create new IAM user with  Programmatic access  Grant read/write permissions for new user (read  detailed guide )  Generate new access/secret keys  Turn on Amazon integration and provide access/secret keys and name of the bucket you've created  Press save and refresh the page, green light indicates correct integration status", 
            "title": "Amazon"
        }, 
        {
            "location": "/integrations/#email", 
            "text": "Zafira provides functionality for sending test results, widgets and dashboards via email. You have to specify correct SMTP credentials to enable this feature. We are mostly using Gmail for that purposes. You can use configuration below replacing email and password with your valid Gmail credentials.   Turn on Email integration  Specify correct SMTP host and port  Specify valid Gmail credentials   Press save and refresh the page, green light indicates correct integration status", 
            "title": "Email"
        }, 
        {
            "location": "/integrations/#jenkins", 
            "text": "Jenkins integration is used for triggering new builds and collecting test jobs configuration during the startup. Also Zafira provides remote debug with Jenkins integration enabled. For Jenkins integration follow the next steps:   Create user with READ,RUN access for jobs  Generate access token (read  instruction )  Paste Jenkins URL, username and token to Zafira  Press save and refresh the page, green light indicates correct integration status", 
            "title": "Jenkins"
        }, 
        {
            "location": "/integrations/#jira", 
            "text": "Jira integration allows to track known issues status for failed test cases. When you assign known issue to contstantly failing test cases you may specify appropriate Jira ticket. In Jira integrationg is inabled, Zafira will check current ticket status and track failure as known issus if ticket opened and as unknown if it is closed, so you will never loose regression bugs.   Paste Jira URL, username and password to Zafira  List set of statuses that indicates that ticket is closed  Press save and refresh the page, green light indicates correct integration status", 
            "title": "Jira"
        }, 
        {
            "location": "/integrations/#ldap", 
            "text": "Zafira supports LDAP authentication, in this case on first success login via LDAP Zafira will register user details in own database. Admin will be able to manage user permissions for every new user came via LDAP.    Use configuration below as a reference for your LDAP connection setup  Press save and refresh the page, green light indicates correct integration status", 
            "title": "LDAP"
        }, 
        {
            "location": "/integrations/#slack", 
            "text": "Zafira is capable to post automation results into specific Slack channels for better visibility.\nIf integration is set up right after test run is finished notification with run details will be sent into appropriate channel. Such  Slack notification contains base information on test run and also includes links to this run in Zafira and Jenkins.\nAfter user marks some run as reviewed and Slack integration is configured for executed Jenkins job user will be proposed to send to Slack notification about reviewed run.\nIn order to setup Slack integration follow the next steps:   Generate Slack web hook url and add it as parameter SLACK_WEB_HOOK_URL into SLACK block at Zafira integrations page  For each Jenkins job you need integration for add parameters in Zafira using next pattern:  SLACK_NOTIF_CHANNEL_real_channel_name=JENKINS_JOB_1;JENKINS_JOB_2  where  real_channel_name - name of Slack channel to post notifications to  JENKINS_JOB_1 and JENKINS_JOB_2 - names of Jenkins jobs  You may add as many integration as you need. For each new Slack channel create new parameter in SLACK section in Zafira  Press save and refresh the page, green light indicates correct integration status", 
            "title": "SLACK"
        }, 
        {
            "location": "/profile/", 
            "text": "Profile\n\n\nNavigate to \nUsername \n My profile\n in top navigation menu to customize your Zafira user preferences.\n\n\n\n  \n\n\n\n\n\nOn hover on round area near your first name settings icon appears, click it and upload or change existing picture of your profile.\n\n\n\n  \n\n\n\n\n\n\n  \n\n\n\n\n\nIn \nUser profile\n area personal user information such as first name, last name and email address  can be changed.\n\n\nEdit values in the corresponding fields and click \nSave\n button.\n\n\n\n  \n\n\n\n\n\nIn \nPreferences\n area Zafira system settings are available:\n\n\n\n\nColor schema\n\n\nDefault dashboard\n\n\nWidget refresh interval\n\n\n\n\nColor schema\n provides choice between Light and Black options.\n\n\nDefault dashboard\n will be the page opened after Zafira login. General dashboard by default.\n\n\nWidget refresh interval\n is applied when Refreshable option is picked for widget and lets widget to refresh its data according to the chosen time interval (30 sec, 1 min, 2 min, 5 min). Disabled by default.\n\n\n\n  \n\n\n\n\n\nIn \nChange password\n area user can update current password. Password must contain not less than 6 characters.\n\n\n\n  \n\n\n\n\n\nIn \nAccess token\n area token required for Zafira integration can be generated and copied .", 
            "title": "Profile"
        }, 
        {
            "location": "/profile/#profile", 
            "text": "Navigate to  Username   My profile  in top navigation menu to customize your Zafira user preferences.  \n     On hover on round area near your first name settings icon appears, click it and upload or change existing picture of your profile.  \n     \n     In  User profile  area personal user information such as first name, last name and email address  can be changed.  Edit values in the corresponding fields and click  Save  button.  \n     In  Preferences  area Zafira system settings are available:   Color schema  Default dashboard  Widget refresh interval   Color schema  provides choice between Light and Black options.  Default dashboard  will be the page opened after Zafira login. General dashboard by default.  Widget refresh interval  is applied when Refreshable option is picked for widget and lets widget to refresh its data according to the chosen time interval (30 sec, 1 min, 2 min, 5 min). Disabled by default.  \n     In  Change password  area user can update current password. Password must contain not less than 6 characters.  \n     In  Access token  area token required for Zafira integration can be generated and copied .", 
            "title": "Profile"
        }, 
        {
            "location": "/dashboards/", 
            "text": "Dashboards", 
            "title": "Dashboards"
        }, 
        {
            "location": "/dashboards/#dashboards", 
            "text": "", 
            "title": "Dashboards"
        }, 
        {
            "location": "/test_runs/", 
            "text": "Test runs", 
            "title": "Test runs"
        }, 
        {
            "location": "/test_runs/#test-runs", 
            "text": "", 
            "title": "Test runs"
        }, 
        {
            "location": "/user_management/", 
            "text": "User management", 
            "title": "User management"
        }, 
        {
            "location": "/user_management/#user-management", 
            "text": "", 
            "title": "User management"
        }, 
        {
            "location": "/releases/", 
            "text": "Release notes", 
            "title": "Release notes"
        }, 
        {
            "location": "/releases/#release-notes", 
            "text": "", 
            "title": "Release notes"
        }
    ]
}