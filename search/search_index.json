{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nZafira is central automation reporting system that is build on the top of Java Spring Framework. It dramatically increases the transparany of test automation results and provides better undestanding of product quality. Qaprosoft team is developing Zafira based on more then 10-years expertise in quality assurance and we strongly believe that your QA/Dev engineers and managers will love it!\n\n\n\n  \n\n\n\n\n\nZafira was initially designed to track automation progress of the tests written using \nCarina automation framework\n but you are capable to integrate Zafira client into you own automation tool. We are activly developing clients for different languages and frameworks but still looking for active community to provide better support. \n\n\nPrimary features\n\n\n\n\nReal-time test results tracking via websockets\n\n\nVNC streaming and video recording of test sessions\n\n\nFlexibly configured widgets and dashboards based on \nD3JS\n\n\nUser management with authorization policies\n\n\nIntegration with TestRail and JIRA\n\n\nIntegration with Hipchat and Slack\n\n\nAbility to compose automation reports and send via email\n\n\n\n\n\n  \n\n    \n\n      \nConfigurable dashboards\n\n      \n\n    \n\n    \n\n      \nIntegrations with multiple services\n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \nReal-time test results\n\n      \n\n    \n\n    \n\n      \nLive streaming and video recording\n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \nComparison of test runs\n\n      \n\n    \n\n    \n\n      \nTest issues tracking", 
            "title": "Overview"
        }, 
        {
            "location": "/#introduction", 
            "text": "Zafira is central automation reporting system that is build on the top of Java Spring Framework. It dramatically increases the transparany of test automation results and provides better undestanding of product quality. Qaprosoft team is developing Zafira based on more then 10-years expertise in quality assurance and we strongly believe that your QA/Dev engineers and managers will love it!  \n     Zafira was initially designed to track automation progress of the tests written using  Carina automation framework  but you are capable to integrate Zafira client into you own automation tool. We are activly developing clients for different languages and frameworks but still looking for active community to provide better support.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#primary-features", 
            "text": "Real-time test results tracking via websockets  VNC streaming and video recording of test sessions  Flexibly configured widgets and dashboards based on  D3JS  User management with authorization policies  Integration with TestRail and JIRA  Integration with Hipchat and Slack  Ability to compose automation reports and send via email   \n   \n     \n       Configurable dashboards \n       \n     \n     \n       Integrations with multiple services \n       \n     \n   \n   \n     \n       Real-time test results \n       \n     \n     \n       Live streaming and video recording \n       \n     \n   \n   \n     \n       Comparison of test runs \n       \n     \n     \n       Test issues tracking", 
            "title": "Primary features"
        }, 
        {
            "location": "/getting_started/", 
            "text": "Getting started\n\n\nPrerequesties\n\n\nThe easiest way to deploy Zafira it to use \nDocker\n. You will find all the details for installation of \nDocker Engine\n and \nDocker Compose\n in oficial documentation. Docker allows to install Zafira on Linux, Mac or Windows. Make sure that you have allocated at least 2 CPUs and 4Gb or RAM for Docker operations.\n\n\n\n  \n\n\n\n\n\nBefore running Zafira, verify that following ports are not binded:\n\n\n\n\n8080  (Tomcat)\n\n\n5433  (PostgresDB)\n\n\n15672 (RabbitMQ)\n\n\n15674 (RabbitMQ)\n\n\n5672  (RabbitMQ)\n\n\n5601  (ELK)\n\n\n9200  (ELK)\n\n\n5044  (ELK)\n\n\n\n\nStartup in Docker\n\n\n\n\nClone Zafira repo:\n\n\n\n\n$ git clone git@github.com:qaprosoft/zafira.git\n\n\n\n\n\n\nIf you are planning to access Zafira remotely you will need to modify \ndocker-compose.yml\n specifying appropriate IP address of your host:\n\n\n\n\nenvironment:\n  - ZAFIRA_URL=http://localhost:8080\n\n\n\n\n\n\nStart Zafira:\n\n\n\n\n$ docker-compose up -d\n\n\n\n\n\n\nVerify deployment by running:\n\n\n\n\n$ docker ps\n\nCONTAINER ID        IMAGE                               COMMAND    \nc0e8e371de0f        qaprosoft/zafira:latest             \n/bin/sh -c /entrypo\u2026\n\na207d5718996        sebp/elk:630                        \n/usr/local/bin/star\u2026\n \n5ccaadeeafe7        qaprosoft/rabbitmq:latest           \ndocker-entrypoint.s\u2026\n\n922b75b2849a        selenium/standalone-chrome:latest   \n/opt/bin/entry_poin\u2026\n\ne8a2d32590ed        qaprosoft/postgres:9.6              \ndocker-entrypoint.s\u2026\n\n\n\n\n\n\n\nOpen Zafira in your browser:\n\n\n\n\nhttp://localhost:8080/zafira\n\n\n\n\n\n\nUse default credentials to login:\n\n\n\n\nqpsdemo/qpsdemo", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting_started/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting_started/#prerequesties", 
            "text": "The easiest way to deploy Zafira it to use  Docker . You will find all the details for installation of  Docker Engine  and  Docker Compose  in oficial documentation. Docker allows to install Zafira on Linux, Mac or Windows. Make sure that you have allocated at least 2 CPUs and 4Gb or RAM for Docker operations.  \n     Before running Zafira, verify that following ports are not binded:   8080  (Tomcat)  5433  (PostgresDB)  15672 (RabbitMQ)  15674 (RabbitMQ)  5672  (RabbitMQ)  5601  (ELK)  9200  (ELK)  5044  (ELK)", 
            "title": "Prerequesties"
        }, 
        {
            "location": "/getting_started/#startup-in-docker", 
            "text": "Clone Zafira repo:   $ git clone git@github.com:qaprosoft/zafira.git   If you are planning to access Zafira remotely you will need to modify  docker-compose.yml  specifying appropriate IP address of your host:   environment:\n  - ZAFIRA_URL=http://localhost:8080   Start Zafira:   $ docker-compose up -d   Verify deployment by running:   $ docker ps\n\nCONTAINER ID        IMAGE                               COMMAND    \nc0e8e371de0f        qaprosoft/zafira:latest              /bin/sh -c /entrypo\u2026 \na207d5718996        sebp/elk:630                         /usr/local/bin/star\u2026  \n5ccaadeeafe7        qaprosoft/rabbitmq:latest            docker-entrypoint.s\u2026 \n922b75b2849a        selenium/standalone-chrome:latest    /opt/bin/entry_poin\u2026 \ne8a2d32590ed        qaprosoft/postgres:9.6               docker-entrypoint.s\u2026    Open Zafira in your browser:   http://localhost:8080/zafira   Use default credentials to login:   qpsdemo/qpsdemo", 
            "title": "Startup in Docker"
        }, 
        {
            "location": "/client_setup/", 
            "text": "Client setup\n\n\nAccess token\n\n\nZafira provides REST API to track test automation results (Swagger is avaible by http://localhost:8080/zafira-ws/swagger-ui.html). You have diffent options of integration of your test client. Carina automation framework has integration with Zafira under the hood. Regardless of integration flow you selected, first of all you will need access token generated. Navigate to \nUsername\n \n \nProfile\n in top navigation menu:\n\n\n\n  \n\n\n\n\n\nScroll down and generate new access token:\n\n\n\n  \n\n\n\n\n\nZafira uses stateless authenticatication using \nJWT\n technology. In general clients stores refresh token that is used to generate access token with 5-hours expiration term. \n\n\nPOST /api/auth/refresh\n{\n  \nrefreshToken\n: \naccess_token\n\n}\n\nResponse:\n{\n  \ntype\n: \nBearer\n,\n  \naccessToken\n: \neyJhbGciOiJIUzUxMiJ9...\n,\n  \nrefreshToken\n: \neyJhbGciOiJIUzUxMi9...\n,\n  \nexpiresIn\n: 300\n}\n\n\n\n\nAll HTTP calls that requires authorization context should contain haeder:\n\n\nAuthorizarion: Bearer \nauth_token\n\n\n\n\n\nIntegration with test frameworks\n\n\nThe easiest option to use Zafira with test automation is Carina framework. Carina tracks automation results under the hood, all you need to do is setting up of correct access token in \nzafira.properties\n file.\n\n\nzafira_enabled=true\nzafira_service_url=http://localhost:8080/zafira-ws\nzafira_access_token=eyJhbGciOiJIUzUxMiJ9.eyJzdWI...\nzafira_project=UNKNOWN\nzafira_rerun_failures=false\nzafira_report_emails=\nzafira_configurator=com.qaprosoft.carina.core.foundation.report.ZafiraConfigurator\n\n\n\n\nVerify following properties:\n\n zafira_enabled=true\n\n zafira_service_url=\n\n\nBy default \nzafira_project=UNKNOWN\n but using admin user you are capable to create multiple projects via Zafira UI (Top menu \n Project \n Create). When new project created you may override \nzafira_project\n property and track resutls in appropriate context.", 
            "title": "Client setup"
        }, 
        {
            "location": "/client_setup/#client-setup", 
            "text": "", 
            "title": "Client setup"
        }, 
        {
            "location": "/client_setup/#access-token", 
            "text": "Zafira provides REST API to track test automation results (Swagger is avaible by http://localhost:8080/zafira-ws/swagger-ui.html). You have diffent options of integration of your test client. Carina automation framework has integration with Zafira under the hood. Regardless of integration flow you selected, first of all you will need access token generated. Navigate to  Username     Profile  in top navigation menu:  \n     Scroll down and generate new access token:  \n     Zafira uses stateless authenticatication using  JWT  technology. In general clients stores refresh token that is used to generate access token with 5-hours expiration term.   POST /api/auth/refresh\n{\n   refreshToken :  access_token \n}\n\nResponse:\n{\n   type :  Bearer ,\n   accessToken :  eyJhbGciOiJIUzUxMiJ9... ,\n   refreshToken :  eyJhbGciOiJIUzUxMi9... ,\n   expiresIn : 300\n}  All HTTP calls that requires authorization context should contain haeder:  Authorizarion: Bearer  auth_token", 
            "title": "Access token"
        }, 
        {
            "location": "/client_setup/#integration-with-test-frameworks", 
            "text": "The easiest option to use Zafira with test automation is Carina framework. Carina tracks automation results under the hood, all you need to do is setting up of correct access token in  zafira.properties  file.  zafira_enabled=true\nzafira_service_url=http://localhost:8080/zafira-ws\nzafira_access_token=eyJhbGciOiJIUzUxMiJ9.eyJzdWI...\nzafira_project=UNKNOWN\nzafira_rerun_failures=false\nzafira_report_emails=\nzafira_configurator=com.qaprosoft.carina.core.foundation.report.ZafiraConfigurator  Verify following properties:  zafira_enabled=true  zafira_service_url=  By default  zafira_project=UNKNOWN  but using admin user you are capable to create multiple projects via Zafira UI (Top menu   Project   Create). When new project created you may override  zafira_project  property and track resutls in appropriate context.", 
            "title": "Integration with test frameworks"
        }, 
        {
            "location": "/integrations/", 
            "text": "Integration", 
            "title": "Integrations"
        }, 
        {
            "location": "/integrations/#integration", 
            "text": "", 
            "title": "Integration"
        }, 
        {
            "location": "/profile/", 
            "text": "Profile", 
            "title": "Profile"
        }, 
        {
            "location": "/profile/#profile", 
            "text": "", 
            "title": "Profile"
        }, 
        {
            "location": "/dashboards/", 
            "text": "Dashboards", 
            "title": "Dashboards"
        }, 
        {
            "location": "/dashboards/#dashboards", 
            "text": "", 
            "title": "Dashboards"
        }, 
        {
            "location": "/test_runs/", 
            "text": "Test runs", 
            "title": "Test runs"
        }, 
        {
            "location": "/test_runs/#test-runs", 
            "text": "", 
            "title": "Test runs"
        }, 
        {
            "location": "/user_management/", 
            "text": "User management", 
            "title": "User management"
        }, 
        {
            "location": "/user_management/#user-management", 
            "text": "", 
            "title": "User management"
        }, 
        {
            "location": "/releases/", 
            "text": "Release notes", 
            "title": "Release notes"
        }, 
        {
            "location": "/releases/#release-notes", 
            "text": "", 
            "title": "Release notes"
        }
    ]
}